generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}


//
// ENUMS
//

enum Role {
  USER
  ADMIN
}

enum ManagerRole {
  ADMIN
  EDITOR
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

//
// MODELS
//

model User {
  id                 String   @id @default(uuid())
  username           String
  email              String   @unique
  password           String
  role               Role     @default(USER)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  accessToken        String?  @unique
  isVerified         Boolean  @default(false)
  verificationToken  String?  @unique
  resetPasswordToken String?  @unique

  posts    Post[]
  comments Comment[]
  likes    Like[]

  companies        Company[]        @relation("CompanyEmployees")
  managedCompanies CompanyManager[]
  jobApplications  JobApplication[] @relation("JobApplications")
}

model Post {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likesCount Int      @default(0)

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comments Comment[]
  likedBy  Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Company {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobs      Job[]
  employees User[]           @relation("CompanyEmployees")
  managers  CompanyManager[]
}

model CompanyManager {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  companyId String
  company   Company     @relation(fields: [companyId], references: [id])
  role      ManagerRole

  @@unique([userId, companyId])
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String?
  salary      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  applications JobApplication[]
}

model JobApplication {
  id        String            @id @default(uuid())
  userId    String
  jobId     String
  createdAt DateTime          @default(now())
  status    ApplicationStatus @default(PENDING)
  decidedAt DateTime?

  user User @relation("JobApplications", fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId])
}
