# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Author {
  id: ID!
  username: String!
  email: String!
  role: Role!
}

"""User roles"""
enum Role {
  USER
  ADMIN
}

type Comment {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: Author!
  authorId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
  id: ID!
  content: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  likesCount: Float!
  author: Author!
  authorId: String!
  comments: [Comment!]
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
  accessToken: String
  verificationToken: String
  isVerified: Boolean!
  resetPasswordToken: String
  posts: [Post!]
  comments: [Comment!]
}

type Meta {
  total: Int!
  page: Int!
  lastPage: Int!
  limit: Int!
}

type PaginatedUser {
  results: [User!]
  meta: Meta!
}

type PaginatedPost {
  results: [Post!]
  meta: Meta!
}

type Query {
  users(paginationDto: PaginationDto): PaginatedUser!
  user(id: ID!): User!
  posts(paginationDto: PaginationDto): PaginatedPost!
}

input PaginationDto {
  page: Int = 1
  limit: Int = 10
=======
type Job {
  id: ID!
  title: String!
  description: String!
  location: String
  salary: Float
  companyId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type JobApplication {
  id: ID!
  userId: String!
  jobId: String!
  createdAt: DateTime!
  status: ApplicationStatus!
  decidedAt: DateTime
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type Query {
  myApplications: [JobApplication!]!
  applicantsForJob(jobId: String!): [JobApplication!]!
  users: [User!]!
  user(id: ID!): User!
  posts: [Post!]!
  jobs: [Job!]!
  job(id: String!): Job!
  jobsByCompany(companyId: String!): [Job!]!
}

type Mutation {
  applyToJob(input: ApplyJobInput!): JobApplication!
  changeApplicationStatus(applicationId: String!, status: ApplicationStatus!): JobApplication!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): User!
  createPost(createPostInput: CreatePostInput!, image: Upload): Post!
  updatePost(id: ID!, updatePostInput: UpdatePostInput!): Post!
  removePost(id: ID!): Post!
  likePost(id: ID!): Post!
  unlikePost(id: ID!): Post!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(id: ID!, updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: ID!): Comment!
  createJob(createJobInput: CreateJobInput!): Job!
}

input ApplyJobInput {
  jobId: String!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  username: String
  email: String
  password: String
  id: ID!
}

input CreatePostInput {
  content: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdatePostInput {
  content: String
}

input CreateCommentInput {
  content: String!
  postId: ID!
}

input UpdateCommentInput {
  content: String!
}

input CreateJobInput {
  title: String!
  description: String!
  location: String
  salary: Float
  companyId: String!
}